This app contains the full functionality of Uber without the payment processing which I never intended to implement. To start off I created a LoginActivity and MapActivity for both customers and drivers. The main activity will start the MapActivity of customer or driver depending on if the user is logged in or not. If the user is not logged in, the login activity is started, where the user can either login(if their information is stored in Firebase) or register which will store the user's information in the database. Once the user is registered as either a driver or customer, they may login. The login activity that is started depends on which button the user clicks inside the MainActivity.

A user that is a customer may access the CustomerMapActivity if they are registered within the database. This also applies for a user trying to access the DriverMapActivity. Once this activity starts, the location of the customer is grabbed and stored. The customer has the options to click the Settings, History, Logout, or Call Uber button. When the "Call Uber" button is clicked, the latitude and longitude of the customer is compared with the latitude and longitude of all logged on drivers within 10 miles (the lat/lng is stored inside Firebase when a user registers). When the closest match is found, an alert is sent to the closest driver that a customer is waiting to be picked up. While the alert is sent to the driver, the drivers data is fetched from the database and displayed the the customer. This data includes the drivers location, name, phone number, rating, and profile picture. The rating data is passed into a rating bar which calculates the average rating of the driver. The customer also has the option to rate the driver which updates the drivers rating in real time. A route is drawn for both the customer and the driver. Once the longitude and latitude of both are the same, the application is terminated. The History button is straightforward in that it will display the information of the driver found each time the Call Uber button was clicked. The Settings button allows the customer to change their info which includes name, phone number, and profile picture. When the Logout button is clicked the customer is removed from the Firebase database.

A user that is a driver can access the DriverMapActivity if they are registered within the database. When the DriverMapActivity starts, the "Active Driver" section in the Firebase database is populated with the drivers info. The driver is able to click a Logout or Settings button in the DriverMapActivity. The logout button is straightforward, and removes the driver from "Active Drivers" in the Firebase database. The Settings, however, can do a lot more, in that it allows the driver to change his information that is stored in the database in real time. He has the option to change his name, phone number, and car; along with the option to pick what type of Uber he is. When a customer hits the Call Uber button and is matched with a driver, not only does the customer recieve the driver's information, but the driver also recieves the customers information. This makes it easy to get in contact with one another if there is an issue.
